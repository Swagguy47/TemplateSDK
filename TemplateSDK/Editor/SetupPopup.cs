using System.Collections;
using System.Collections.Generic;
using System.IO;
using UnityEditor;
using UnityEngine;


public class SetupPopup : EditorWindow
{
    bool HasWebGl = false;
    bool AllFine = false;

    [MenuItem("Avatar Template/(1) Setup Project File")]
    public static void ShowWindow()
    {
        if (!AssetDatabase.IsValidFolder("Assets/TemplateSDK/Templates"))
        {
            AssetDatabase.CreateFolder("Assets/TemplateSDK", "Templates");


            //Write csc file
            string path = "Assets/csc.rsp";

            StreamWriter writer = new StreamWriter(path, true);

            writer.WriteLine("-r:System.IO.Compression.dll");
            writer.WriteLine("-r:System.IO.Compression.FileSystem.dll");

            writer.Close();

            AssetDatabase.ImportAsset(path);
            //-done-

            //Packages/com.vrchat.base/Editor/VRCSDK/Dependencies/VRChat
            AssetDatabase.DeleteAsset("Packages/com.vrchat.base/Editor/VRCSDK/Dependencies/VRChat/EnvConfig.cs");

            //Modify vrc env config
            /*
             if anyone's reading this and is wondering what this is for, it's nothing bad or really 'hacky' in the vrcsdk
            this does not effect the vrcsdk's features/functionality in any real way

            what this does, is expand EnvConfig.cs, (a vrcsdk editor script running in the background which modifies your
            project settings to stay vrc compatible), to add WebGL as an allowed build platform, that's it.
            Literally one extra line of code.

            Without this modificaiton the vrcsdk will intercept the template compile process and prevent us from making a
            stripped down web assetbundle of your avatar to be customized by others. (y'know, the whole point of any of this)
             */
            string path2 = "Packages/com.vrchat.base/Editor/VRCSDK/Dependencies/VRChat/EnvConfig.cs";

            StreamWriter writer2 = new StreamWriter(path2, true);

            writer2.Write("#define ENV_SET_INCLUDED_SHADERS\r\n\r\nusing UnityEngine;\r\nusing UnityEditor;\r\nusing System.Collections;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Reflection;\r\nusing UnityEngine.Rendering;\r\nusing VRC.SDKBase.Validation.Performance.Stats;\r\nusing Object = UnityEngine.Object;\r\n\r\nnamespace VRC.Editor\r\n{\r\n    /// <summary>\r\n    /// Setup up SDK env on editor launch\r\n    /// </summary>\r\n    [InitializeOnLoad]\r\n    public class EnvConfig\r\n    {\r\n        private static readonly BuildTarget[] relevantBuildTargets =\r\n        {\r\n            BuildTarget.Android,\r\n            BuildTarget.iOS,\r\n            BuildTarget.StandaloneLinux64,\r\n            BuildTarget.StandaloneWindows, BuildTarget.StandaloneWindows64,\r\n            BuildTarget.StandaloneOSX\r\n        };\r\n\r\n        #if !VRC_CLIENT\r\n    private static readonly BuildTarget[] allowedBuildtargets = {\r\n        BuildTarget.StandaloneWindows64,\r\n        BuildTarget.Android,\r\n        BuildTarget.WebGL\r\n    };\r\n        #endif\r\n\r\n        private static readonly Dictionary<BuildTarget, GraphicsDeviceType[]> allowedGraphicsAPIs = new Dictionary<BuildTarget, GraphicsDeviceType[]>()\r\n        {\r\n            { BuildTarget.Android, new[] { GraphicsDeviceType.OpenGLES3, /* GraphicsDeviceType.Vulkan */ } },\r\n            { BuildTarget.iOS, null },\r\n            { BuildTarget.StandaloneLinux64, null },\r\n            { BuildTarget.StandaloneWindows, new[] { GraphicsDeviceType.Direct3D11 } },\r\n            { BuildTarget.StandaloneWindows64, new[] { GraphicsDeviceType.Direct3D11 } },\r\n            { BuildTarget.StandaloneOSX, null }\r\n        };\r\n\r\n        #if ENV_SET_INCLUDED_SHADERS && VRC_CLIENT\r\n        private static readonly string[] ensureTheseShadersAreAvailable =\r\n        {\r\n            \"Hidden/CubeBlend\",\r\n            \"Hidden/CubeBlur\",\r\n            \"Hidden/CubeCopy\",\r\n            \"Hidden/VideoDecode\",\r\n            \"Legacy Shaders/Bumped Diffuse\",\r\n            \"Legacy Shaders/Bumped Specular\",\r\n            \"Legacy Shaders/Decal\",\r\n            \"Legacy Shaders/Diffuse Detail\",\r\n            \"Legacy Shaders/Diffuse Fast\",\r\n            \"Legacy Shaders/Diffuse\",\r\n            \"Legacy Shaders/Diffuse\",\r\n            \"Legacy Shaders/Lightmapped/Diffuse\",\r\n            \"Legacy Shaders/Lightmapped/Specular\",\r\n            \"Legacy Shaders/Lightmapped/VertexLit\",\r\n            \"Legacy Shaders/Parallax Diffuse\",\r\n            \"Legacy Shaders/Parallax Specular\",\r\n            \"Legacy Shaders/Reflective/Bumped Diffuse\",\r\n            \"Legacy Shaders/Reflective/Bumped Specular\",\r\n            \"Legacy Shaders/Reflective/Bumped Unlit\",\r\n            \"Legacy Shaders/Reflective/Bumped VertexLit\",\r\n            \"Legacy Shaders/Reflective/Diffuse\",\r\n            \"Legacy Shaders/Reflective/Parallax Diffuse\",\r\n            \"Legacy Shaders/Reflective/Parallax Specular\",\r\n            \"Legacy Shaders/Reflective/Specular\",\r\n            \"Legacy Shaders/Reflective/VertexLit\",\r\n            \"Legacy Shaders/Self-Illumin/Bumped Diffuse\",\r\n            \"Legacy Shaders/Self-Illumin/Bumped Specular\",\r\n            \"Legacy Shaders/Self-Illumin/Diffuse\",\r\n            \"Legacy Shaders/Self-Illumin/Parallax Diffuse\",\r\n            \"Legacy Shaders/Self-Illumin/Parallax Specular\",\r\n            \"Legacy Shaders/Self-Illumin/Specular\",\r\n            \"Legacy Shaders/Self-Illumin/VertexLit\",\r\n            \"Legacy Shaders/Specular\",\r\n            \"Legacy Shaders/Transparent/Bumped Diffuse\",\r\n            \"Legacy Shaders/Transparent/Bumped Specular\",\r\n            \"Legacy Shaders/Transparent/Cutout/Bumped Diffuse\",\r\n            \"Legacy Shaders/Transparent/Cutout/Bumped Specular\",\r\n            \"Legacy Shaders/Transparent/Cutout/Diffuse\",\r\n            \"Legacy Shaders/Transparent/Cutout/Soft Edge Unlit\",\r\n            \"Legacy Shaders/Transparent/Cutout/Specular\",\r\n            \"Legacy Shaders/Transparent/Cutout/VertexLit\",\r\n            \"Legacy Shaders/Transparent/Diffuse\",\r\n            \"Legacy Shaders/Transparent/Parallax Diffuse\",\r\n            \"Legacy Shaders/Transparent/Parallax Specular\",\r\n            \"Legacy Shaders/Transparent/Specular\",\r\n            \"Legacy Shaders/Transparent/VertexLit\",\r\n            \"Legacy Shaders/VertexLit\",\r\n            \"Legacy Shaders/Particles/Additive\",\r\n            \"Legacy Shaders/Particles/~Additive-Multiply\",\r\n            \"Legacy Shaders/Particles/Additive (Soft)\",\r\n            \"Legacy Shaders/Particles/Alpha Blended\",\r\n            \"Legacy Shaders/Particles/Anim Alpha Blended\",\r\n            \"Legacy Shaders/Particles/Multiply\",\r\n            \"Legacy Shaders/Particles/Multiply (Double)\",\r\n            \"Legacy Shaders/Particles/Alpha Blended Premultiply\",\r\n            \"Legacy Shaders/Particles/VertexLit Blended\",\r\n            \"Mobile/Particles/Additive\",\r\n            \"Mobile/Particles/Alpha Blended\",\r\n            \"Mobile/Particles/Multiply\",\r\n            \"Mobile/Particles/VertexLit Blended\",\r\n            \"Mobile/Skybox\",\r\n            \"Nature/Terrain/Diffuse\",\r\n            \"Nature/Terrain/Specular\",\r\n            \"Nature/Terrain/Standard\",\r\n            \"Particles/Additive (Soft)\",\r\n            \"Particles/Additive\",\r\n            \"Particles/Alpha Blended Premultiply\",\r\n            \"Particles/Alpha Blended\",\r\n            \"Particles/Anim Alpha Blended\",\r\n            \"Particles/Multiply (Double)\",\r\n            \"Particles/Multiply\",\r\n            \"Particles/VertexLit Blended\",\r\n            \"Particles/~Additive-Multiply\",\r\n            \"Skybox/Cubemap\",\r\n            \"Skybox/Procedural\",\r\n            \"Skybox/6 Sided\",\r\n            \"Sprites/Default\",\r\n            \"Sprites/Diffuse\",\r\n            \"UI/Default\",\r\n            \"VRChat/UI/Unlit/WebPanelTransparent\",\r\n            \"Toon/Lit\",\r\n            \"Toon/Lit (Double)\",\r\n            \"Toon/Lit Cutout\",\r\n            \"Toon/Lit Cutout (Double)\",\r\n            \"Toon/Lit Outline\",\r\n            \"VRChat/Mobile/Diffuse\",\r\n            \"Video/RealtimeEmissiveGamma\",\r\n            \"VRChat/PC/Toon Lit\",\r\n            \"VRChat/PC/Toon Lit (Double)\",\r\n            \"VRChat/PC/Toon Lit Cutout\",\r\n            \"VRChat/PC/Toon Lit Cutout (Double)\",\r\n            \"Unlit/Color\",\r\n            \"Unlit/Transparent\",\r\n            \"Unlit/Transparent Cutout\",\r\n            \"Unlit/Texture\",\r\n            \"MatCap/Vertex/Textured Lit\",\r\n            \"VRChat/Mobile/Bumped Uniform Diffuse\",\r\n            \"VRChat/Mobile/Bumped Uniform Specular\",\r\n            \"VRChat/Mobile/Toon Lit\",\r\n            \"VRChat/Mobile/MatCap Lit\",\r\n            \"VRChat/Mobile/Skybox\",\r\n            \"VRChat/Mobile/Lightmapped\",\r\n            \"VRChat/Mobile/Bumped Mapped Specular\",\r\n            \"VRChat/Mobile/Diffuse\",\r\n            \"VRChat/Mobile/Particles/Additive\",\r\n            \"VRChat/Mobile/Particles/Multiply\",\r\n            \"VRChat/Mobile/Standard Lite\",\r\n            \"TextMeshPro/Distance Field (Surface)\",\r\n            \"TextMeshPro/Mobile/Distance Field (No ZTest)\",\r\n            \"TextMeshPro/Distance Field Overlay\",\r\n            \"TextMeshPro/Sprite\",\r\n            \"TextMeshPro/Mobile/Distance Field - Masking\",\r\n            \"TextMeshPro/Mobile/Distance Field Overlay\",\r\n            \"TextMeshPro/Mobile/Distance Field (Surface)\",\r\n            \"TextMeshPro/Mobile/Distance Field\",\r\n            \"TextMeshPro/Distance Field\",\r\n            \"TextMeshPro/Bitmap Custom Atlas\",\r\n            \"VRChat/UI/TextMeshPro/Mobile/Distance Field\",\r\n            \"TextMeshPro/Mobile/Bitmap\",\r\n            \"TextMeshPro/Bitmap\",\r\n            \"TextMeshPro/Mobile/Distance Field - Masking (NoZTest)\"\r\n        };\r\n        #endif\r\n\r\n        private static bool _requestConfigureSettings = true;\r\n\r\n        static EnvConfig()\r\n        {\r\n            EditorApplication.update += EditorUpdate;\r\n        }\r\n\r\n        private static void EditorUpdate()\r\n        {\r\n            try\r\n            {\r\n                if(!_requestConfigureSettings)\r\n                {\r\n                    return;\r\n                }\r\n\r\n                if(ConfigureSettings())\r\n                {\r\n                    _requestConfigureSettings = false;\r\n                }\r\n            }\r\n            catch(Exception e)\r\n            {\r\n                Debug.LogException(e);\r\n                _requestConfigureSettings = false;\r\n            }\r\n        }\r\n\r\n        private static void RequestConfigureSettings()\r\n        {\r\n            _requestConfigureSettings = true;\r\n        }\r\n\r\n        [UnityEditor.Callbacks.DidReloadScripts(int.MaxValue)]\r\n        private static void DidReloadScripts()\r\n        {\r\n            RequestConfigureSettings();\r\n        }\r\n\r\n        private static bool ConfigureSettings()\r\n        {\r\n            CheckForFirstInit();\r\n\r\n            if(EditorApplication.isPlayingOrWillChangePlaymode || EditorApplication.isUpdating)\r\n            {\r\n                return false;\r\n            }\r\n\r\n            ConfigurePlayerSettings();\r\n\r\n            if(!VRC.Core.ConfigManager.RemoteConfig.IsInitialized())\r\n            {\r\n                VRC.Core.API.SetOnlineMode(true, \"vrchat\");\r\n                VRC.Core.ConfigManager.RemoteConfig.Init();\r\n            }\r\n\r\n            ConfigureAssets();\r\n\r\n            LoadEditorResources();\r\n\r\n            return true;\r\n        }\r\n\r\n        #if !VRC_CLIENT\r\n    private static void SetDLLPlatforms(string dllName, bool active)\r\n    {\r\n        string[] assetGuids = AssetDatabase.FindAssets(dllName);\r\n\r\n        foreach(string guid in assetGuids)\r\n        {\r\n            string dllPath = AssetDatabase.GUIDToAssetPath(guid);\r\n            if(string.IsNullOrEmpty(dllPath) || dllPath.ToLower().EndsWith(\".dll\") == false)\r\n            {\r\n                return;\r\n            }\r\n\r\n            PluginImporter importer = AssetImporter.GetAtPath(dllPath) as PluginImporter;\r\n            if(importer == null)\r\n            {\r\n                return;\r\n            }\r\n\r\n            bool allCorrect = true;\r\n            if(importer.GetCompatibleWithAnyPlatform() != active)\r\n            {\r\n                allCorrect = false;\r\n            }\r\n            else\r\n            {\r\n                if(importer.GetCompatibleWithAnyPlatform())\r\n                {\r\n                    if(importer.GetExcludeEditorFromAnyPlatform() != !active ||\r\n                       importer.GetExcludeFromAnyPlatform(BuildTarget.StandaloneWindows) != !active)\r\n                    {\r\n                        allCorrect = false;\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    if(importer.GetCompatibleWithEditor() != active ||\r\n                       importer.GetCompatibleWithPlatform(BuildTarget.StandaloneWindows) != active)\r\n                    {\r\n                        allCorrect = false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(allCorrect)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            if(active)\r\n            {\r\n                importer.SetCompatibleWithAnyPlatform(true);\r\n                importer.SetExcludeEditorFromAnyPlatform(false);\r\n                importer.SetExcludeFromAnyPlatform(BuildTarget.Android, false);\r\n                importer.SetExcludeFromAnyPlatform(BuildTarget.StandaloneWindows, false);\r\n                importer.SetExcludeFromAnyPlatform(BuildTarget.StandaloneWindows64, false);\r\n                importer.SetExcludeFromAnyPlatform(BuildTarget.StandaloneLinux64, false);\r\n            }\r\n            else\r\n            {\r\n                importer.SetCompatibleWithAnyPlatform(false);\r\n                importer.SetCompatibleWithEditor(false);\r\n                importer.SetCompatibleWithPlatform(BuildTarget.Android, false);\r\n                importer.SetCompatibleWithPlatform(BuildTarget.StandaloneWindows, false);\r\n                importer.SetCompatibleWithPlatform(BuildTarget.StandaloneWindows64, false);\r\n                importer.SetCompatibleWithPlatform(BuildTarget.StandaloneLinux64, false);\r\n            }\r\n\r\n            importer.SaveAndReimport();\r\n        }\r\n    }\r\n        #endif\r\n\r\n        [MenuItem(\"VRChat SDK/Utilities/Force Configure Player Settings\")]\r\n        public static void ConfigurePlayerSettings()\r\n        {\r\n            VRC.Core.Logger.Log(\"Setting required PlayerSettings...\", VRC.Core.DebugLevel.All);\r\n\r\n            SetBuildTarget();\r\n\r\n            // Needed for Microsoft.CSharp namespace in DLLMaker\r\n            // Doesn't seem to work though\r\n            if(PlayerSettings.GetApiCompatibilityLevel(EditorUserBuildSettings.selectedBuildTargetGroup) != ApiCompatibilityLevel.NET_4_6)\r\n            {\r\n                PlayerSettings.SetApiCompatibilityLevel(EditorUserBuildSettings.selectedBuildTargetGroup, ApiCompatibilityLevel.NET_4_6);\r\n            }\r\n\r\n            if(!PlayerSettings.runInBackground)\r\n            {\r\n                PlayerSettings.runInBackground = true;\r\n            }\r\n\r\n            #if !VRC_CLIENT\r\n        SetDLLPlatforms(\"VRCCore-Standalone\", false);\r\n        SetDLLPlatforms(\"VRCCore-Editor\", true);\r\n            #endif\r\n\r\n            SetDefaultGraphicsAPIs();\r\n            SetGraphicsSettings();\r\n            SetQualitySettings();\r\n            SetAudioSettings();\r\n            SetPlayerSettings();\r\n\r\n            #if VRC_CLIENT\r\n            AssetDatabase.SaveAssets();\r\n            AssetDatabase.Refresh();\r\n\r\n            PlatformSwitcher.RefreshRequiredPackages(EditorUserBuildSettings.selectedBuildTargetGroup);\r\n            #else\r\n        // SDK\r\n\r\n        // default to steam runtime in sdk (shouldn't matter)\r\n        SetVRSDKs(EditorUserBuildSettings.selectedBuildTargetGroup, new string[] { \"None\", \"OpenVR\", \"Oculus\" });\r\n\r\n        VRC.Core.AnalyticsSDK.Initialize(VRC.Core.SDKClientUtilities.GetSDKVersionDate());\r\n            #endif\r\n\r\n            #if VRC_CLIENT\r\n            // VRCLog should handle disk writing\r\n            PlayerSettings.usePlayerLog = false;\r\n            foreach(LogType logType in Enum.GetValues(typeof(LogType)).Cast<LogType>())\r\n            {\r\n                switch(logType)\r\n                {\r\n                    case LogType.Assert:\r\n                    case LogType.Exception:\r\n                    {\r\n                        PlayerSettings.SetStackTraceLogType(logType, StackTraceLogType.ScriptOnly);\r\n                        break;\r\n                    }\r\n                    case LogType.Error:\r\n                    case LogType.Warning:\r\n                    case LogType.Log:\r\n                    {\r\n                        #if UNITY_EDITOR\r\n                        PlayerSettings.SetStackTraceLogType(logType, StackTraceLogType.ScriptOnly);\r\n                        #else\r\n                    PlayerSettings.SetStackTraceLogType(logType, StackTraceLogType.None);\r\n                        #endif\r\n                        break;\r\n                    }\r\n                    default:\r\n                    {\r\n                        throw new ArgumentOutOfRangeException();\r\n                    }\r\n                }\r\n            }\r\n            #endif\r\n        }\r\n\r\n        private static void EnableBatching(bool enable)\r\n        {\r\n            PlayerSettings[] playerSettings = Resources.FindObjectsOfTypeAll<PlayerSettings>();\r\n            if(playerSettings == null)\r\n            {\r\n                return;\r\n            }\r\n\r\n            SerializedObject playerSettingsSerializedObject = new SerializedObject(playerSettings.Cast<Object>().ToArray());\r\n            SerializedProperty batchingSettings = playerSettingsSerializedObject.FindProperty(\"m_BuildTargetBatching\");\r\n            if(batchingSettings == null)\r\n            {\r\n                return;\r\n            }\r\n\r\n            for(int i = 0; i < batchingSettings.arraySize; i++)\r\n            {\r\n                SerializedProperty batchingArrayValue = batchingSettings.GetArrayElementAtIndex(i);\r\n\r\n                IEnumerator batchingEnumerator = batchingArrayValue?.GetEnumerator();\r\n                if(batchingEnumerator == null)\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                while(batchingEnumerator.MoveNext())\r\n                {\r\n                    SerializedProperty property = (SerializedProperty)batchingEnumerator.Current;\r\n\r\n                    if(property != null && property.name == \"m_BuildTarget\")\r\n                    {\r\n                        // only change setting on \"Standalone\" entry\r\n                        if(property.stringValue != \"Standalone\")\r\n                        {\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if(property != null && property.name == \"m_StaticBatching\")\r\n                    {\r\n                        property.boolValue = enable;\r\n                    }\r\n\r\n                    if(property != null && property.name == \"m_DynamicBatching\")\r\n                    {\r\n                        property.boolValue = enable;\r\n                    }\r\n                }\r\n            }\r\n\r\n            playerSettingsSerializedObject.ApplyModifiedProperties();\r\n        }\r\n\r\n        public static void SetVRSDKs(BuildTargetGroup buildTargetGroup, string[] sdkNames)\r\n        {\r\n            VRC.Core.Logger.Log(\"Setting virtual reality SDKs in PlayerSettings: \", VRC.Core.DebugLevel.All);\r\n            if(sdkNames != null)\r\n            {\r\n                foreach(string s in sdkNames)\r\n                {\r\n                    VRC.Core.Logger.Log(\"- \" + s, VRC.Core.DebugLevel.All);\r\n                }\r\n            }\r\n\r\n            if(!EditorApplication.isPlaying)\r\n            {\r\n#pragma warning disable 618\r\n                PlayerSettings.SetVirtualRealitySDKs(buildTargetGroup, sdkNames);\r\n#pragma warning restore 618\r\n            }\r\n        }\r\n\r\n        private static void CheckForFirstInit()\r\n        {\r\n            bool firstLaunch = SessionState.GetBool(\"EnvConfigFirstLaunch\", true);\r\n            if(firstLaunch)\r\n            {\r\n                SessionState.SetBool(\"EnvConfigFirstLaunch\", false);\r\n            }\r\n        }\r\n\r\n        private static void SetDefaultGraphicsAPIs()\r\n        {\r\n            VRC.Core.Logger.Log(\"Setting Graphics APIs\", VRC.Core.DebugLevel.All);\r\n            foreach(BuildTarget target in relevantBuildTargets)\r\n            {\r\n                GraphicsDeviceType[] apis = allowedGraphicsAPIs[target];\r\n                if(apis == null)\r\n                {\r\n                    SetGraphicsAPIs(target, true);\r\n                }\r\n                else\r\n                {\r\n                    SetGraphicsAPIs(target, false, apis);\r\n                }\r\n            }\r\n        }\r\n\r\n        private static void SetGraphicsAPIs(BuildTarget platform, bool auto, GraphicsDeviceType[] allowedTypes = null)\r\n        {\r\n            try\r\n            {\r\n                if(auto != PlayerSettings.GetUseDefaultGraphicsAPIs(platform))\r\n                {\r\n                    PlayerSettings.SetUseDefaultGraphicsAPIs(platform, auto);\r\n                }\r\n            }\r\n            catch\r\n            {\r\n                // ignored\r\n            }\r\n\r\n            try\r\n            {\r\n                if(allowedTypes == null || allowedTypes.Length == 0)\r\n                {\r\n                    return;\r\n                }\r\n\r\n                GraphicsDeviceType[] graphicsAPIs = PlayerSettings.GetGraphicsAPIs(platform);\r\n                if(graphicsAPIs == null || graphicsAPIs.Length == 0)\r\n                {\r\n                    return;\r\n                }\r\n\r\n                if(allowedTypes.SequenceEqual(graphicsAPIs))\r\n                {\r\n                    return;\r\n                }\r\n\r\n                PlayerSettings.SetGraphicsAPIs(platform, allowedTypes);\r\n            }\r\n            catch\r\n            {\r\n                // ignored\r\n            }\r\n        }\r\n\r\n        private static void SetQualitySettings()\r\n        {\r\n            VRC.Core.Logger.Log(\"Setting Graphics Settings\", VRC.Core.DebugLevel.All);\r\n            const string qualitySettingsAssetPath = \"ProjectSettings/QualitySettings.asset\";\r\n            SerializedObject qualitySettings = new SerializedObject(AssetDatabase.LoadAllAssetsAtPath(qualitySettingsAssetPath)[0]);\r\n\r\n            SerializedProperty qualitySettingsPresets = qualitySettings.FindProperty(\"m_QualitySettings\");\r\n            qualitySettingsPresets.arraySize = _graphicsPresets.Length;\r\n\r\n            bool changedProperty = false;\r\n            for(int index = 0; index < _graphicsPresets.Length; index++)\r\n            {\r\n                SerializedProperty currentQualityLevel = qualitySettingsPresets.GetArrayElementAtIndex(index);\r\n                Dictionary<string, object> graphicsPreset = _graphicsPresets[index];\r\n                foreach(KeyValuePair<string, object> setting in graphicsPreset)\r\n                {\r\n                    SerializedProperty property = currentQualityLevel.FindPropertyRelative(setting.Key);\r\n                    if(property == null)\r\n                    {\r\n                        Debug.LogWarning($\"Serialized property for quality setting '{setting.Key}' could not be found.\");\r\n                        continue;\r\n                    }\r\n\r\n                    object settingValue = setting.Value;\r\n                    #if !VRC_CLIENT\r\n                if(setting.Key == \"name\")\r\n                {\r\n                    settingValue = $\"VRC {setting.Value}\";\r\n                }\r\n                    #endif\r\n\r\n                    switch(settingValue)\r\n                    {\r\n                        case null:\r\n                        {\r\n                            if(property.objectReferenceValue == setting.Value as Object)\r\n                            {\r\n                                continue;\r\n                            }\r\n\r\n                            property.objectReferenceValue = null;\r\n                            break;\r\n                        }\r\n                        case string settingAsString:\r\n                        {\r\n                            if(property.stringValue == settingAsString)\r\n                            {\r\n                                continue;\r\n                            }\r\n\r\n                            property.stringValue = settingAsString;\r\n                            break;\r\n                        }\r\n                        case bool settingAsBool:\r\n                        {\r\n                            if(property.boolValue == settingAsBool)\r\n                            {\r\n                                continue;\r\n                            }\r\n\r\n                            property.boolValue = settingAsBool;\r\n                            break;\r\n                        }\r\n                        case int settingAsInt:\r\n                        {\r\n                            if(property.intValue == settingAsInt)\r\n                            {\r\n                                continue;\r\n                            }\r\n\r\n                            property.intValue = settingAsInt;\r\n                            break;\r\n                        }\r\n                        case float settingAsFloat:\r\n                        {\r\n                            if(Mathf.Approximately(property.floatValue, settingAsFloat))\r\n                            {\r\n                                continue;\r\n                            }\r\n\r\n                            property.floatValue = settingAsFloat;\r\n                            break;\r\n                        }\r\n                        case double settingAsDouble:\r\n                        {\r\n                            if(Mathf.Approximately((float)property.doubleValue, (float)settingAsDouble))\r\n                            {\r\n                                continue;\r\n                            }\r\n\r\n                            property.doubleValue = settingAsDouble;\r\n                            break;\r\n                        }\r\n                        case Vector3 settingAsVector3:\r\n                        {\r\n                            if(property.vector3Value == settingAsVector3)\r\n                            {\r\n                                continue;\r\n                            }\r\n\r\n                            property.vector3Value = settingAsVector3;\r\n                            break;\r\n                        }\r\n                        case string[] settingAsStringArray:\r\n                        {\r\n                            property.arraySize = settingAsStringArray.Length;\r\n\r\n                            bool changedArrayEntry = false;\r\n                            for(int settingIndex = 0; settingIndex < settingAsStringArray.Length; settingIndex++)\r\n                            {\r\n                                SerializedProperty entry = property.GetArrayElementAtIndex(settingIndex);\r\n                                if(entry.stringValue == settingAsStringArray[settingIndex])\r\n                                {\r\n                                    continue;\r\n                                }\r\n\r\n                                entry.stringValue = settingAsStringArray[settingIndex];\r\n                                changedArrayEntry = true;\r\n                            }\r\n\r\n                            if(!changedArrayEntry)\r\n                            {\r\n                                continue;\r\n                            }\r\n\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    #if !VRC_CLIENT\r\n                string levelName = _graphicsPresets[index][\"name\"] as string;\r\n                if(Application.isMobilePlatform)\r\n                {\r\n                    if(levelName == \"Mobile\")\r\n                    {\r\n                        Debug.Log($\"Set incorrect quality setting '{setting.Key}' in level '{levelName}' to value '{setting.Value}'.\");\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    if(levelName != \"Mobile\")\r\n                    {\r\n                        Debug.Log($\"Set incorrect quality setting '{setting.Key}' in level '{levelName}' to value '{setting.Value}'.\");\r\n                    }\r\n                }\r\n\r\n                    #endif\r\n                    changedProperty = true;\r\n                }\r\n            }\r\n\r\n            if(!changedProperty)\r\n            {\r\n                return;\r\n            }\r\n\r\n            int defaultQuality = !Application.isMobilePlatform ? 3 : 4;\r\n            #if !VRC_CLIENT\r\n        Debug.Log($\"A quality setting was changed resetting to the default quality: {_graphicsPresets[defaultQuality][\"name\"]}.\");\r\n            #endif\r\n            SerializedProperty currentGraphicsQuality = qualitySettings.FindProperty(\"m_CurrentQuality\");\r\n            currentGraphicsQuality.intValue = defaultQuality;\r\n\r\n            qualitySettings.ApplyModifiedPropertiesWithoutUndo();\r\n            AssetDatabase.SaveAssets();\r\n        }\r\n\r\n        private static void SetGraphicsSettings()\r\n        {\r\n            VRC.Core.Logger.Log(\"Setting Graphics Settings\", VRC.Core.DebugLevel.All);\r\n\r\n            const string graphicsSettingsAssetPath = \"ProjectSettings/GraphicsSettings.asset\";\r\n            SerializedObject graphicsManager = new SerializedObject(AssetDatabase.LoadAllAssetsAtPath(graphicsSettingsAssetPath)[0]);\r\n\r\n            SerializedProperty deferred = graphicsManager.FindProperty(\"m_Deferred.m_Mode\");\r\n            deferred.enumValueIndex = 1;\r\n\r\n            SerializedProperty deferredReflections = graphicsManager.FindProperty(\"m_DeferredReflections.m_Mode\");\r\n            deferredReflections.enumValueIndex = 1;\r\n\r\n            SerializedProperty screenSpaceShadows = graphicsManager.FindProperty(\"m_ScreenSpaceShadows.m_Mode\");\r\n            screenSpaceShadows.enumValueIndex = 1;\r\n\r\n            SerializedProperty legacyDeferred = graphicsManager.FindProperty(\"m_LegacyDeferred.m_Mode\");\r\n            legacyDeferred.enumValueIndex = 1;\r\n\r\n            SerializedProperty depthNormals = graphicsManager.FindProperty(\"m_DepthNormals.m_Mode\");\r\n            depthNormals.enumValueIndex = 1;\r\n\r\n            SerializedProperty motionVectors = graphicsManager.FindProperty(\"m_MotionVectors.m_Mode\");\r\n            motionVectors.enumValueIndex = 1;\r\n\r\n            SerializedProperty lightHalo = graphicsManager.FindProperty(\"m_LightHalo.m_Mode\");\r\n            lightHalo.enumValueIndex = 1;\r\n\r\n            SerializedProperty lensFlare = graphicsManager.FindProperty(\"m_LensFlare.m_Mode\");\r\n            lensFlare.enumValueIndex = 1;\r\n\r\n            #if ENV_SET_INCLUDED_SHADERS && VRC_CLIENT\r\n            // clear GraphicsSettings->Always Included Shaders - these cause a +5s app startup time increase on Quest.\r\n            // include Shader objects as resources instead\r\n            SerializedProperty alwaysIncluded = graphicsManager.FindProperty(\"m_AlwaysIncludedShaders\");\r\n            alwaysIncluded.arraySize = 0;\r\n\r\n            #if ENV_SEARCH_FOR_SHADERS\r\n            Resources.LoadAll(\"\", typeof(Shader));\r\n            System.Collections.Generic.List<Shader> foundShaders = Resources.FindObjectsOfTypeAll<Shader>()\r\n                .Where(s => { string name = s.name.ToLower(); return 0 == (s.hideFlags & HideFlags.DontSave); })\r\n                .GroupBy(s => s.name)\r\n                .Select(g => g.First())\r\n                .ToList();\r\n            #else\r\n            List<Shader> foundShaders = new List<Shader>();\r\n            #endif\r\n\r\n            foreach(string shader in ensureTheseShadersAreAvailable.OrderBy(s => s, StringComparer.Ordinal))\r\n            {\r\n                if(foundShaders.Any(s => s.name == shader))\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                Shader namedShader = Shader.Find(shader);\r\n                if(namedShader != null)\r\n                {\r\n                    foundShaders.Add(namedShader);\r\n                }\r\n            }\r\n\r\n            foundShaders.Sort((s1, s2) => string.Compare(s1.name, s2.name, StringComparison.Ordinal));\r\n\r\n            // populate Resources list of \"always included shaders\"\r\n            ShaderAssetList alwaysIncludedShaders = AssetDatabase.LoadAssetAtPath<ShaderAssetList>(\"Assets/Resources/AlwaysIncludedShaders.asset\");\r\n            if(alwaysIncludedShaders == null)\r\n            {\r\n                alwaysIncludedShaders = ScriptableObject.CreateInstance<ShaderAssetList>();\r\n                AssetDatabase.CreateAsset(alwaysIncludedShaders, \"Assets/Resources/AlwaysIncludedShaders.asset\");\r\n            }\r\n\r\n            bool anyMissing = false;\r\n            HashSet<Shader> alwaysIncludeShadersHashSet = new HashSet<Shader>(alwaysIncludedShaders.Shaders);\r\n            foundShaders.Sort((left, right) => string.CompareOrdinal(left.name, right.name));\r\n            foreach(Shader foundShader in foundShaders)\r\n            {\r\n                if(alwaysIncludeShadersHashSet.Contains(foundShader))\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                anyMissing = true;\r\n                break;\r\n            }\r\n\r\n            if(anyMissing)\r\n            {\r\n                alwaysIncludedShaders.Shaders = foundShaders.ToArray();\r\n                EditorUtility.SetDirty(alwaysIncludedShaders);\r\n            }\r\n            #else\r\n            SerializedProperty alwaysIncluded = graphicsManager.FindProperty(\"m_AlwaysIncludedShaders\");\r\n            alwaysIncluded.arraySize = 0;\r\n            #endif\r\n\r\n            SerializedProperty preloaded = graphicsManager.FindProperty(\"m_PreloadedShaders\");\r\n            preloaded.ClearArray();\r\n            preloaded.arraySize = 0;\r\n\r\n            SerializedProperty spritesDefaultMaterial = graphicsManager.FindProperty(\"m_SpritesDefaultMaterial\");\r\n            spritesDefaultMaterial.objectReferenceValue = Shader.Find(\"Sprites/Default\");\r\n\r\n            SerializedProperty renderPipeline = graphicsManager.FindProperty(\"m_CustomRenderPipeline\");\r\n            renderPipeline.objectReferenceValue = null;\r\n\r\n            SerializedProperty transparencySortMode = graphicsManager.FindProperty(\"m_TransparencySortMode\");\r\n            transparencySortMode.enumValueIndex = 0;\r\n\r\n            SerializedProperty transparencySortAxis = graphicsManager.FindProperty(\"m_TransparencySortAxis\");\r\n            transparencySortAxis.vector3Value = Vector3.forward;\r\n\r\n            SerializedProperty defaultRenderingPath = graphicsManager.FindProperty(\"m_DefaultRenderingPath\");\r\n            defaultRenderingPath.intValue = 1;\r\n\r\n            SerializedProperty defaultMobileRenderingPath = graphicsManager.FindProperty(\"m_DefaultMobileRenderingPath\");\r\n            defaultMobileRenderingPath.intValue = 1;\r\n\r\n            SerializedProperty tierSettings = graphicsManager.FindProperty(\"m_TierSettings\");\r\n            tierSettings.ClearArray();\r\n            tierSettings.arraySize = 0;\r\n\r\n            #if ENV_SET_LIGHTMAP\r\n            SerializedProperty lightmapStripping = graphicsManager.FindProperty(\"m_LightmapStripping\");\r\n            lightmapStripping.enumValueIndex = 1;\r\n\r\n            SerializedProperty instancingStripping = graphicsManager.FindProperty(\"m_InstancingStripping\");\r\n            instancingStripping.enumValueIndex = 2;\r\n\r\n            SerializedProperty lightmapKeepPlain = graphicsManager.FindProperty(\"m_LightmapKeepPlain\");\r\n            lightmapKeepPlain.boolValue = true;\r\n\r\n            SerializedProperty lightmapKeepDirCombined = graphicsManager.FindProperty(\"m_LightmapKeepDirCombined\");\r\n            lightmapKeepDirCombined.boolValue = true;\r\n\r\n            SerializedProperty lightmapKeepDynamicPlain = graphicsManager.FindProperty(\"m_LightmapKeepDynamicPlain\");\r\n            lightmapKeepDynamicPlain.boolValue = true;\r\n\r\n            SerializedProperty lightmapKeepDynamicDirCombined = graphicsManager.FindProperty(\"m_LightmapKeepDynamicDirCombined\");\r\n            lightmapKeepDynamicDirCombined.boolValue = true;\r\n\r\n            SerializedProperty lightmapKeepShadowMask = graphicsManager.FindProperty(\"m_LightmapKeepShadowMask\");\r\n            lightmapKeepShadowMask.boolValue = true;\r\n\r\n            SerializedProperty lightmapKeepSubtractive = graphicsManager.FindProperty(\"m_LightmapKeepSubtractive\");\r\n            lightmapKeepSubtractive.boolValue = true;\r\n            #endif\r\n\r\n            SerializedProperty albedoSwatchInfos = graphicsManager.FindProperty(\"m_AlbedoSwatchInfos\");\r\n            albedoSwatchInfos.ClearArray();\r\n            albedoSwatchInfos.arraySize = 0;\r\n\r\n            SerializedProperty lightsUseLinearIntensity = graphicsManager.FindProperty(\"m_LightsUseLinearIntensity\");\r\n            lightsUseLinearIntensity.boolValue = true;\r\n\r\n            SerializedProperty lightsUseColorTemperature = graphicsManager.FindProperty(\"m_LightsUseColorTemperature\");\r\n            lightsUseColorTemperature.boolValue = true;\r\n\r\n            graphicsManager.ApplyModifiedProperties();\r\n        }\r\n\r\n        public static FogSettings GetFogSettings()\r\n        {\r\n            VRC.Core.Logger.Log(\"Force-enabling Fog\", VRC.Core.DebugLevel.All);\r\n\r\n            const string graphicsSettingsAssetPath = \"ProjectSettings/GraphicsSettings.asset\";\r\n            SerializedObject graphicsManager = new SerializedObject(AssetDatabase.LoadAllAssetsAtPath(graphicsSettingsAssetPath)[0]);\r\n\r\n\r\n            SerializedProperty fogStrippingSerializedProperty = graphicsManager.FindProperty(\"m_FogStripping\");\r\n            FogSettings.FogStrippingMode fogStripping = (FogSettings.FogStrippingMode)fogStrippingSerializedProperty.enumValueIndex;\r\n\r\n            SerializedProperty fogKeepLinearSerializedProperty = graphicsManager.FindProperty(\"m_FogKeepLinear\");\r\n            bool keepLinear = fogKeepLinearSerializedProperty.boolValue;\r\n\r\n            SerializedProperty fogKeepExpSerializedProperty = graphicsManager.FindProperty(\"m_FogKeepExp\");\r\n            bool keepExp = fogKeepExpSerializedProperty.boolValue;\r\n\r\n            SerializedProperty fogKeepExp2SerializedProperty = graphicsManager.FindProperty(\"m_FogKeepExp2\");\r\n            bool keepExp2 = fogKeepExp2SerializedProperty.boolValue;\r\n\r\n            FogSettings fogSettings = new FogSettings(fogStripping, keepLinear, keepExp, keepExp2);\r\n            return fogSettings;\r\n        }\r\n\r\n        public static void SetFogSettings(FogSettings fogSettings)\r\n        {\r\n            VRC.Core.Logger.Log(\"Force-enabling Fog\", VRC.Core.DebugLevel.All);\r\n\r\n            const string graphicsSettingsAssetPath = \"ProjectSettings/GraphicsSettings.asset\";\r\n            SerializedObject graphicsManager = new SerializedObject(AssetDatabase.LoadAllAssetsAtPath(graphicsSettingsAssetPath)[0]);\r\n\r\n            SerializedProperty fogStripping = graphicsManager.FindProperty(\"m_FogStripping\");\r\n            fogStripping.enumValueIndex = (int)fogSettings.fogStrippingMode;\r\n\r\n            SerializedProperty fogKeepLinear = graphicsManager.FindProperty(\"m_FogKeepLinear\");\r\n            fogKeepLinear.boolValue = fogSettings.keepLinear;\r\n\r\n            SerializedProperty fogKeepExp = graphicsManager.FindProperty(\"m_FogKeepExp\");\r\n            fogKeepExp.boolValue = fogSettings.keepExp;\r\n\r\n            SerializedProperty fogKeepExp2 = graphicsManager.FindProperty(\"m_FogKeepExp2\");\r\n            fogKeepExp2.boolValue = fogSettings.keepExp2;\r\n\r\n            graphicsManager.ApplyModifiedProperties();\r\n        }\r\n\r\n        private static void SetAudioSettings()\r\n        {\r\n            Object audioManager = AssetDatabase.LoadMainAssetAtPath(\"ProjectSettings/AudioManager.asset\");\r\n            SerializedObject audioManagerSerializedObject = new SerializedObject(audioManager);\r\n            audioManagerSerializedObject.Update();\r\n\r\n            SerializedProperty sampleRateSerializedProperty = audioManagerSerializedObject.FindProperty(\"m_SampleRate\");\r\n            sampleRateSerializedProperty.intValue = 48000; // forcing 48k seems to avoid sample rate conversion problems\r\n\r\n            SerializedProperty dspBufferSizeSerializedProperty = audioManagerSerializedObject.FindProperty(\"m_RequestedDSPBufferSize\");\r\n            dspBufferSizeSerializedProperty.intValue = 0;\r\n\r\n            SerializedProperty defaultSpeakerModeSerializedProperty = audioManagerSerializedObject.FindProperty(\"Default Speaker Mode\");\r\n            defaultSpeakerModeSerializedProperty.intValue = 2; // 2 = Stereo\r\n\r\n            SerializedProperty virtualVoiceCountSerializedProperty = audioManagerSerializedObject.FindProperty(\"m_VirtualVoiceCount\");\r\n            SerializedProperty realVoiceCountSerializedProperty = audioManagerSerializedObject.FindProperty(\"m_RealVoiceCount\");\r\n            if(EditorUserBuildSettings.selectedBuildTargetGroup == BuildTargetGroup.Android)\r\n            {\r\n                virtualVoiceCountSerializedProperty.intValue = 32;\r\n                realVoiceCountSerializedProperty.intValue = 24;\r\n            }\r\n            else\r\n            {\r\n                virtualVoiceCountSerializedProperty.intValue = 64;\r\n                realVoiceCountSerializedProperty.intValue = 32;\r\n            }\r\n\r\n            audioManagerSerializedObject.ApplyModifiedPropertiesWithoutUndo();\r\n            AssetDatabase.SaveAssets();\r\n        }\r\n\r\n        private static void SetPlayerSettings()\r\n        {\r\n            // asset bundles MUST be built with settings that are compatible with VRC client\r\n            #if VRC_OVERRIDE_COLORSPACE_GAMMA\r\n        PlayerSettings.colorSpace = ColorSpace.Gamma;\r\n            #else\r\n            PlayerSettings.colorSpace = ColorSpace.Linear;\r\n            #endif\r\n\r\n            #if !VRC_CLIENT // In client rely on platform-switcher\r\n        if (!EditorApplication.isPlaying)\r\n        {\r\n            #pragma warning disable 618\r\n            PlayerSettings.SetVirtualRealitySupported(EditorUserBuildSettings.selectedBuildTargetGroup, true);\r\n            #pragma warning restore 618\r\n        }\r\n            #endif\r\n\r\n            PlayerSettings.graphicsJobs = true;\r\n\r\n            PlayerSettings.gpuSkinning = true;\r\n\r\n            #if UNITY_2019_3_OR_NEWER\r\n            PlayerSettings.gcIncremental = true;\r\n            #endif\r\n\r\n            #if VRC_VR_WAVE\r\n        PlayerSettings.stereoRenderingPath = StereoRenderingPath.MultiPass;     // Need to use Multi-pass on Wave SDK otherwise mirrors break\r\n            #else\r\n            PlayerSettings.stereoRenderingPath = StereoRenderingPath.SinglePass;\r\n            #endif\r\n\r\n            #if UNITY_2018_4_OR_NEWER && !UNITY_2019_3_OR_NEWER\r\n        PlayerSettings.scriptingRuntimeVersion = ScriptingRuntimeVersion.Latest;\r\n            #endif\r\n\r\n            #if UNITY_ANDROID\r\n            PlayerSettings.Android.forceSDCardPermission = true; // Need access to SD card for saving images\r\n            PlayerSettings.Android.targetArchitectures = AndroidArchitecture.ARM64;\r\n\r\n            if(PlayerSettings.Android.targetArchitectures.HasFlag(AndroidArchitecture.ARM64))\r\n            {\r\n                // Since we need different IL2CPP args we can't build ARM64 with other Architectures.\r\n                PlayerSettings.Android.targetArchitectures = AndroidArchitecture.ARM64;\r\n                PlayerSettings.SetAdditionalIl2CppArgs(\"\");\r\n            }\r\n            else\r\n            {\r\n                PlayerSettings.SetAdditionalIl2CppArgs(\"--linker-flags=\\\"-long-plt\\\"\");\r\n            }\r\n\r\n            #if UNITY_2019_3_OR_NEWER\r\n            PlayerSettings.Android.targetSdkVersion = AndroidSdkVersions.AndroidApiLevel29;\r\n            #else\r\n        PlayerSettings.Android.targetSdkVersion = AndroidSdkVersions.AndroidApiLevel26;\r\n            #endif\r\n\r\n            #if VRC_VR_OCULUS\r\n#pragma warning disable CS0618\r\n            PlayerSettings.VROculus.v2Signing = true;\r\n#pragma warning restore CS0618\r\n            #endif\r\n            #else\r\n        PlayerSettings.SetAdditionalIl2CppArgs(\"\");\r\n            #endif\r\n\r\n            SetActiveSDKDefines();\r\n\r\n            EnableBatching(true);\r\n        }\r\n\r\n        public static void SetActiveSDKDefines()\r\n        {\r\n            bool definesChanged = false;\r\n            BuildTargetGroup buildTargetGroup = BuildPipeline.GetBuildTargetGroup(EditorUserBuildSettings.activeBuildTarget);\r\n            List<string> defines = PlayerSettings.GetScriptingDefineSymbolsForGroup(buildTargetGroup).Split(';').ToList();\r\n\r\n            Assembly[] assemblies = AppDomain.CurrentDomain.GetAssemblies();\r\n            if(assemblies.Any(assembly => assembly.GetType(\"VRC.Udon.UdonBehaviour\") != null))\r\n            {\r\n                if(!defines.Contains(\"UDON\", StringComparer.OrdinalIgnoreCase))\r\n                {\r\n                    defines.Add(\"UDON\");\r\n                    definesChanged = true;\r\n                }\r\n            }\r\n            else if(defines.Contains(\"UDON\"))\r\n            {\r\n                defines.Remove(\"UDON\");\r\n            }\r\n\r\n            if(VRCSdk3Analysis.IsSdkDllActive(VRCSdk3Analysis.SdkVersion.VRCSDK2))\r\n            {\r\n                if(!defines.Contains(\"VRC_SDK_VRCSDK2\", StringComparer.OrdinalIgnoreCase))\r\n                {\r\n                    defines.Add(\"VRC_SDK_VRCSDK2\");\r\n                    definesChanged = true;\r\n                }\r\n            }\r\n            else if(defines.Contains(\"VRC_SDK_VRCSDK2\"))\r\n            {\r\n                defines.Remove(\"VRC_SDK_VRCSDK2\");\r\n            }\r\n\r\n            if(VRCSdk3Analysis.IsSdkDllActive(VRCSdk3Analysis.SdkVersion.VRCSDK3))\r\n            {\r\n                if(!defines.Contains(\"VRC_SDK_VRCSDK3\", StringComparer.OrdinalIgnoreCase))\r\n                {\r\n                    defines.Add(\"VRC_SDK_VRCSDK3\");\r\n                    definesChanged = true;\r\n                }\r\n            }\r\n            else if(defines.Contains(\"VRC_SDK_VRCSDK3\"))\r\n            {\r\n                defines.Remove(\"VRC_SDK_VRCSDK3\");\r\n            }\r\n\r\n            if(definesChanged)\r\n            {\r\n                PlayerSettings.SetScriptingDefineSymbolsForGroup(buildTargetGroup, string.Join(\";\", defines.ToArray()));\r\n            }\r\n        }\r\n\r\n        private static void SetBuildTarget()\r\n        {\r\n            #if !VRC_CLIENT\r\n        VRC.Core.Logger.Log(\"Setting build target\", VRC.Core.DebugLevel.All);\r\n\r\n        BuildTarget target = UnityEditor.EditorUserBuildSettings.activeBuildTarget;\r\n\r\n        if (!allowedBuildtargets.Contains(target))\r\n        {\r\n            Debug.LogError(\"Target not supported, switching to one that is.\");\r\n            target = allowedBuildtargets[0];\r\n            #pragma warning disable CS0618 // Type or member is obsolete\r\n            EditorUserBuildSettings.SwitchActiveBuildTarget(target);\r\n            #pragma warning restore CS0618 // Type or member is obsolete\r\n        }\r\n            #endif\r\n        }\r\n\r\n        public static void ConfigureAssets(bool forStandaloneBuild = false)\r\n        {\r\n            #if VRC_CLIENT\r\n            VRC.UI.Client.Editor.VRCUIManagerEditorHelpers.ConfigureNewUIAssets(forStandaloneBuild);\r\n            #endif\r\n        }\r\n\r\n        private static void LoadEditorResources()\r\n        {\r\n            AvatarPerformanceStats.Initialize();\r\n        }\r\n\r\n        public readonly struct FogSettings\r\n        {\r\n            public enum FogStrippingMode\r\n            {\r\n                Automatic,\r\n                Custom\r\n            }\r\n\r\n            public readonly FogStrippingMode fogStrippingMode;\r\n            public readonly bool keepLinear;\r\n            public readonly bool keepExp;\r\n            public readonly bool keepExp2;\r\n\r\n            public FogSettings(FogStrippingMode fogStrippingMode)\r\n            {\r\n                this.fogStrippingMode = fogStrippingMode;\r\n                keepLinear = true;\r\n                keepExp = true;\r\n                keepExp2 = true;\r\n            }\r\n\r\n            public FogSettings(FogStrippingMode fogStrippingMode, bool keepLinear, bool keepExp, bool keepExp2)\r\n            {\r\n                this.fogStrippingMode = fogStrippingMode;\r\n                this.keepLinear = keepLinear;\r\n                this.keepExp = keepExp;\r\n                this.keepExp2 = keepExp2;\r\n            }\r\n        }\r\n\r\n        private static readonly Dictionary<string, object>[] _graphicsPresets =\r\n        {\r\n            new Dictionary<string, object>\r\n            {\r\n                { \"name\", \"Low\" },\r\n                { \"pixelLightCount\", 4 },\r\n                { \"shadows\", 2 },\r\n                { \"shadowResolution\", 2 },\r\n                { \"shadowProjection\", 1 },\r\n                { \"shadowCascades\", 2 },\r\n                { \"shadowDistance\", 75f },\r\n                { \"shadowNearPlaneOffset\", 2f },\r\n                { \"shadowCascade2Split\", 0.33333334 },\r\n                { \"shadowCascade4Split\", new Vector3(0.06666667f, 0.19999999f, 0.46666664f) },\r\n                { \"shadowmaskMode\", 0 },\r\n                { \"skinWeights\", 4 },\r\n                { \"textureQuality\", 0 },\r\n                { \"anisotropicTextures\", 2 },\r\n                { \"antiAliasing\", 0 },\r\n                { \"softParticles\", true },\r\n                { \"softVegetation\", true },\r\n                { \"realtimeReflectionProbes\", true },\r\n                { \"billboardsFaceCameraPosition\", true },\r\n                { \"vSyncCount\", 0 },\r\n                { \"lodBias\", 1f },\r\n                { \"maximumLODLevel\", 0 },\r\n                { \"streamingMipmapsActive\", false },\r\n                { \"streamingMipmapsAddAllCameras\", true },\r\n                { \"streamingMipmapsMemoryBudget\", 512f },\r\n                { \"streamingMipmapsRenderersPerFrame\", 512 },\r\n                { \"streamingMipmapsMaxLevelReduction\", 2 },\r\n                { \"streamingMipmapsMaxFileIORequests\", 1024 },\r\n                { \"particleRaycastBudget\", 1024 },\r\n                { \"asyncUploadTimeSlice\", 2 },\r\n                { \"asyncUploadBufferSize\", 64 },\r\n                { \"asyncUploadPersistentBuffer\", true },\r\n                { \"resolutionScalingFixedDPIFactor\", 1f },\r\n                { \"customRenderPipeline\", null },\r\n                { \"excludedTargetPlatforms\", new[] { \"Android\" } }\r\n            },\r\n            new Dictionary<string, object>\r\n            {\r\n                { \"name\", \"Medium\" },\r\n                { \"pixelLightCount\", 4 },\r\n                { \"shadows\", 2 },\r\n                { \"shadowResolution\", 2 },\r\n                { \"shadowProjection\", 1 },\r\n                { \"shadowCascades\", 2 },\r\n                { \"shadowDistance\", 75f },\r\n                { \"shadowNearPlaneOffset\", 2f },\r\n                { \"shadowCascade2Split\", 0.33333334 },\r\n                { \"shadowCascade4Split\", new Vector3(0.06666667f, 0.19999999f, 0.46666664f) },\r\n                { \"shadowmaskMode\", 0 },\r\n                { \"skinWeights\", 4 },\r\n                { \"textureQuality\", 0 },\r\n                { \"anisotropicTextures\", 2 },\r\n                { \"antiAliasing\", 4 },\r\n                { \"softParticles\", true },\r\n                { \"softVegetation\", true },\r\n                { \"realtimeReflectionProbes\", true },\r\n                { \"billboardsFaceCameraPosition\", true },\r\n                { \"vSyncCount\", 0 },\r\n                { \"lodBias\", 1.5f },\r\n                { \"maximumLODLevel\", 0 },\r\n                { \"streamingMipmapsActive\", false },\r\n                { \"streamingMipmapsAddAllCameras\", true },\r\n                { \"streamingMipmapsMemoryBudget\", 512f },\r\n                { \"streamingMipmapsRenderersPerFrame\", 512 },\r\n                { \"streamingMipmapsMaxLevelReduction\", 2 },\r\n                { \"streamingMipmapsMaxFileIORequests\", 1024 },\r\n                { \"particleRaycastBudget\", 2048 },\r\n                { \"asyncUploadTimeSlice\", 2 },\r\n                { \"asyncUploadBufferSize\", 64 },\r\n                { \"asyncUploadPersistentBuffer\", true },\r\n                { \"resolutionScalingFixedDPIFactor\", 1f },\r\n                { \"customRenderPipeline\", null },\r\n                { \"excludedTargetPlatforms\", new[] { \"Android\" } }\r\n            },\r\n            new Dictionary<string, object>\r\n            {\r\n                { \"name\", \"High\" },\r\n                { \"pixelLightCount\", 8 },\r\n                { \"shadows\", 2 },\r\n                { \"shadowResolution\", 3 },\r\n                { \"shadowProjection\", 1 },\r\n                { \"shadowCascades\", 2 },\r\n                { \"shadowDistance\", 75f },\r\n                { \"shadowNearPlaneOffset\", 2f },\r\n                { \"shadowCascade2Split\", 0.33333334 },\r\n                { \"shadowCascade4Split\", new Vector3(0.06666667f, 0.19999999f, 0.46666664f) },\r\n                { \"shadowmaskMode\", 0 },\r\n                { \"skinWeights\", 4 },\r\n                { \"textureQuality\", 0 },\r\n                { \"anisotropicTextures\", 2 },\r\n                { \"antiAliasing\", 4 },\r\n                { \"softParticles\", true },\r\n                { \"softVegetation\", true },\r\n                { \"realtimeReflectionProbes\", true },\r\n                { \"billboardsFaceCameraPosition\", true },\r\n                { \"vSyncCount\", 0 },\r\n                { \"lodBias\", 2f },\r\n                { \"maximumLODLevel\", 0 },\r\n                { \"streamingMipmapsActive\", false },\r\n                { \"streamingMipmapsAddAllCameras\", true },\r\n                { \"streamingMipmapsMemoryBudget\", 512f },\r\n                { \"streamingMipmapsRenderersPerFrame\", 512 },\r\n                { \"streamingMipmapsMaxLevelReduction\", 2 },\r\n                { \"streamingMipmapsMaxFileIORequests\", 1024 },\r\n                { \"particleRaycastBudget\", 4096 },\r\n                { \"asyncUploadTimeSlice\", 2 },\r\n                { \"asyncUploadBufferSize\", 128 },\r\n                { \"asyncUploadPersistentBuffer\", true },\r\n                { \"resolutionScalingFixedDPIFactor\", 1f },\r\n                { \"customRenderPipeline\", null },\r\n                { \"excludedTargetPlatforms\", new[] { \"Android\" } }\r\n            },\r\n            new Dictionary<string, object>\r\n            {\r\n                { \"name\", \"Ultra\" },\r\n                { \"pixelLightCount\", 8 },\r\n                { \"shadows\", 2 },\r\n                { \"shadowResolution\", 3 },\r\n                { \"shadowProjection\", 1 },\r\n                { \"shadowCascades\", 4 },\r\n                { \"shadowDistance\", 150f },\r\n                { \"shadowNearPlaneOffset\", 2f },\r\n                { \"shadowCascade2Split\", 0.33333334 },\r\n                { \"shadowCascade4Split\", new Vector3(0.06666667f, 0.19999999f, 0.46666664f) },\r\n                { \"shadowmaskMode\", 0 },\r\n                { \"skinWeights\", 4 },\r\n                { \"textureQuality\", 0 },\r\n                { \"anisotropicTextures\", 2 },\r\n                { \"antiAliasing\", 4 },\r\n                { \"softParticles\", true },\r\n                { \"softVegetation\", true },\r\n                { \"realtimeReflectionProbes\", true },\r\n                { \"billboardsFaceCameraPosition\", true },\r\n                { \"vSyncCount\", 0 },\r\n                { \"lodBias\", 2f },\r\n                { \"maximumLODLevel\", 0 },\r\n                { \"streamingMipmapsActive\", false },\r\n                { \"streamingMipmapsAddAllCameras\", true },\r\n                { \"streamingMipmapsMemoryBudget\", 512f },\r\n                { \"streamingMipmapsRenderersPerFrame\", 512 },\r\n                { \"streamingMipmapsMaxLevelReduction\", 2 },\r\n                { \"streamingMipmapsMaxFileIORequests\", 1024 },\r\n                { \"particleRaycastBudget\", 4096 },\r\n                { \"asyncUploadTimeSlice\", 2 },\r\n                { \"asyncUploadBufferSize\", 128 },\r\n                { \"asyncUploadPersistentBuffer\", true },\r\n                { \"resolutionScalingFixedDPIFactor\", 1f },\r\n                { \"customRenderPipeline\", null },\r\n                { \"excludedTargetPlatforms\", new[] { \"Android\" } }\r\n            },\r\n            new Dictionary<string, object>\r\n            {\r\n                { \"name\", \"Mobile\" },\r\n                { \"pixelLightCount\", 4 },\r\n                { \"shadows\", 0 },\r\n                { \"shadowResolution\", 1 },\r\n                { \"shadowProjection\", 1 },\r\n                { \"shadowCascades\", 1 },\r\n                { \"shadowDistance\", 50f },\r\n                { \"shadowNearPlaneOffset\", 2f },\r\n                { \"shadowCascade2Split\", 0.33333334 },\r\n                { \"shadowCascade4Split\", new Vector3(0.06666667f, 0.19999999f, 0.46666664f) },\r\n                { \"shadowmaskMode\", 0 },\r\n                { \"skinWeights\", 4 },\r\n                { \"textureQuality\", 0 },\r\n                { \"anisotropicTextures\", 2 },\r\n                { \"antiAliasing\", 2 },\r\n                { \"softParticles\", false },\r\n                { \"softVegetation\", false },\r\n                { \"realtimeReflectionProbes\", false },\r\n                { \"billboardsFaceCameraPosition\", true },\r\n                { \"vSyncCount\", 0 },\r\n                { \"lodBias\", 2f },\r\n                { \"maximumLODLevel\", 0 },\r\n                { \"streamingMipmapsActive\", false },\r\n                { \"streamingMipmapsAddAllCameras\", true },\r\n                { \"streamingMipmapsMemoryBudget\", 512f },\r\n                { \"streamingMipmapsRenderersPerFrame\", 512 },\r\n                { \"streamingMipmapsMaxLevelReduction\", 2 },\r\n                { \"streamingMipmapsMaxFileIORequests\", 1024 },\r\n                { \"particleRaycastBudget\", 1024 },\r\n                { \"asyncUploadTimeSlice\", 1 },\r\n                { \"asyncUploadBufferSize\", 32 },\r\n                { \"asyncUploadPersistentBuffer\", true },\r\n                { \"resolutionScalingFixedDPIFactor\", 1f },\r\n                { \"customRenderPipeline\", null },\r\n                { \"excludedTargetPlatforms\", new[] { \"Standalone\" } }\r\n            }\r\n        };\r\n    }\r\n}\r\n");

            writer2.Close();

            AssetDatabase.ImportAsset(path2);

            //-done-

            string file = "Assets/TemplateSDK/Editor/TemplateBuilder.cs";
            var lines = File.ReadAllLines(file);
            lines[0] = "";
            lines[lines.Length - 1] = "";
            File.WriteAllLines(file, lines);

            AssetDatabase.Refresh();

            //-done-

            ShowWindow2();
        }
    }

    public static void ShowWindow2()
    {
        EditorWindow.GetWindow(typeof(SetupPopup));
    }

    private void OnGUI()
    {
        GUILayout.Label("Your project has been made compatible with TemplateSDK");

        HasWebGl = WebGLSupport();

        if (HasWebGl)
        {
            if (GUILayout.Button("Thanks?"))
            {
                this.Close();
            }
        }
        else
        {
            GUILayout.Label("<color=red>BUT</color> There's one more thing");
            GUILayout.Space(10);
            GUILayout.Label("You need to install the 'WebGL build support' module in Unity Hub");
            if (GUILayout.Button("Will do!"))
            {
                this.Close();
            }
        }
    }

    private bool WebGLSupport()
    {
        var moduleManager = System.Type.GetType("UnityEditor.Modules.ModuleManager,UnityEditor.dll");
        var isPlatformSupportLoaded = moduleManager.GetMethod("IsPlatformSupportLoaded", System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.NonPublic);
        var getTargetStringFromBuildTarget = moduleManager.GetMethod("GetTargetStringFromBuildTarget", System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.NonPublic);

        return (bool)isPlatformSupportLoaded.Invoke(null, new object[] { (string)getTargetStringFromBuildTarget.Invoke(null, new object[] { BuildTarget.WebGL }) });
    }
}
